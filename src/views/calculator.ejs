<div class="content">
  <div class="row justify-content-center">
    <div class="col-md-8">
      <div class="card">
        <div class="card-body p-3">
          <!-- Calculadora de Divisas Compacta -->
          <div class="calculator-container">
            <div class="calculator-header mb-2">
              <h5 class="mb-0">Calculadora de Divisas</h5>
              <small class="text-muted">Conversión en tiempo real</small>
            </div>

            <div class="currency-form">
              <div class="currency-input-group mb-2">
                <label for="fromCurrency" class="small">De</label>
                <div class="currency-select-wrapper">
                  <select id="fromCurrency" class="currency-select compact">
                    <option value="" disabled selected>Cargando...</option>
                  </select>
                  <div class="select-arrow"></div>
                </div>
              </div>

              <div class="currency-input-group mb-2">
                <label for="fromAmount" class="small">Cantidad</label>
                <div class="currency-input-wrapper">
                  <input type="number" id="fromAmount" class="currency-input compact" placeholder="0.00" step="0.01" min="0">
                </div>
              </div>

              <button class="currency-swap-btn compact my-1" id="swapCurrencies">
                <i class="fas fa-exchange-alt"></i>
              </button>

              <div class="currency-input-group mb-2">
                <label for="toCurrency" class="small">A</label>
                <div class="currency-select-wrapper">
                  <select id="toCurrency" class="currency-select compact">
                    <option value="" disabled selected>Cargando...</option>
                  </select>
                  <div class="select-arrow"></div>
                </div>
              </div>

              <div class="currency-input-group mb-2">
                <label for="toAmount" class="small">Resultado</label>
                <div class="currency-input-wrapper">
                  <input type="text" id="toAmount" class="currency-input compact" placeholder="0.00" readonly>
                </div>
              </div>

              <div class="result-container compact" id="resultContainer" style="display: none;">
                <div class="result-value" id="resultValue">0.00</div>
                <div class="result-details small" id="resultDetails"></div>
              </div>

              <div class="rate-info small" id="rateInfo">
                Cargando tasas de cambio...
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .calculator-container {
    background-color: white;
    border-radius: 6px;
    padding: 20px;
  }

  .calculator-header h5 {
    color: #404464;
    font-weight: 600;
    font-size: 1.5rem; /* Tamaño aumentado */
    text-align: center; /* Centrado */
    margin-bottom: 0.25rem !important;
  }

  .calculator-header small {
    font-size: 0.85rem; /* Tamaño ligeramente más pequeño para subtítulo */
    text-align: center; /* Centrado */
    display: block; /* Para que ocupe su propia línea */
    color: #5a5f8a;
  }

  .currency-form {
    display: flex;
    flex-direction: column;
    gap: 12px;
  }

  .currency-input-group {
    display: flex;
    flex-direction: column;
    gap: 4px;
  }

  .currency-input-group label {
    color: #404464;
    font-weight: 500;
    font-size: 13px;
  }

  .currency-input-wrapper, .currency-select-wrapper {
    position: relative;
  }

  .currency-input.compact, .currency-select.compact {
    width: 100%;
    padding: 8px 12px;
    padding-left: 12px;
    border: 1px solid #e0e0e0;
    border-radius: 6px;
    font-size: 14px;
    color: #343a40;
    height: 38px;
  }

  .currency-select.compact {
    padding-right: 30px;
    background-color: #f8f9fa;
    cursor: pointer;
  }

  .select-arrow {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    width: 16px;
    height: 16px;
    pointer-events: none;
    color: #404464;
  }

  .currency-swap-btn.compact {
    width: 32px;
    height: 32px;
    margin: 4px auto;
    background-color: #404464; /* Color morado original */
    color: white;
    border: none;
    border-radius: 50%; /* Forma redonda */
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .currency-swap-btn.compact:hover {
    background-color: #5a5f8a;
    transform: rotate(180deg);
  }

  .currency-swap-btn.compact i {
    font-size: 14px;
  }

  .result-container.compact {
    padding: 12px;
    margin-top: 12px;
    border-left-width: 3px;
  }

  .result-value {
    font-size: 18px;
    margin: 6px 0;
  }

  .result-details.small, .rate-info.small {
    font-size: 11px;
  }

  .card {
    border: none;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  }

  .card-body {
    padding: 1rem;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const fromAmount = document.getElementById('fromAmount');
    const toAmount = document.getElementById('toAmount');
    const fromCurrencySelect = document.getElementById('fromCurrency');
    const toCurrencySelect = document.getElementById('toCurrency');
    const swapBtn = document.getElementById('swapCurrencies');
    const resultContainer = document.getElementById('resultContainer');
    const resultValue = document.getElementById('resultValue');
    const resultDetails = document.getElementById('resultDetails');
    const rateInfo = document.getElementById('rateInfo');

    let currencySymbols = {};
    let lastFromCurrency = '';
    let lastToCurrency = '';

    function formatNumber(num) {
      return new Intl.NumberFormat('en-US', {
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
      }).format(num);
    }

    function updateConversion() {
      const amount = parseFloat(fromAmount.value);
      const fromCurrency = fromCurrencySelect.value ? fromCurrencySelect.value.substring(0, 3) : '';
      const toCurrency = toCurrencySelect.value ? toCurrencySelect.value.substring(0, 3) : '';
      
      if (!fromCurrency || !toCurrency) {
        resultContainer.style.display = 'none';
        toAmount.value = '';
        return;
      }

      if (isNaN(amount) || amount <= 0) {
        resultContainer.style.display = 'none';
        toAmount.value = '';
        return;
      }

      // Solo actualizar si cambiaron las monedas o el monto
      if (fromCurrency === lastFromCurrency && 
          toCurrency === lastToCurrency && 
          toAmount.value !== '' && 
          !isNaN(parseFloat(toAmount.value))) {
        return;
      }

      lastFromCurrency = fromCurrency;
      lastToCurrency = toCurrency;

      fetch(`/convert?to=${toCurrency}&from=${fromCurrency}&amount=${amount}`)
        .then(response => response.json())
        .then(data => {
          if (data.error) {
            console.error(data.error);
            rateInfo.textContent = 'Error: ' + data.error;
            return;
          }

          if (!data.success) {
            rateInfo.textContent = 'Error en la API';
            return;
          }

          const convertedAmount = data.result;
          const rate = convertedAmount / amount;

          toAmount.value = formatNumber(convertedAmount);
          resultValue.textContent = `${formatNumber(amount)} ${fromCurrency} = ${formatNumber(convertedAmount)} ${toCurrency}`;
          resultDetails.textContent = `1 ${fromCurrency} = ${formatNumber(rate)} ${toCurrency}`;
          resultContainer.style.display = 'block';
          rateInfo.textContent = `Actualizado: ${new Date().toLocaleTimeString()}`;
        })
        .catch(error => {
          console.error('Error:', error);
          rateInfo.textContent = 'Error en la conexión';
        });
    }

    function swapCurrencies() {
      const tempCurrency = fromCurrencySelect.value;
      fromCurrencySelect.value = toCurrencySelect.value;
      toCurrencySelect.value = tempCurrency;
      
      // Forzar actualización después del intercambio
      lastFromCurrency = '';
      lastToCurrency = '';
      updateConversion();
    }

    function fetchSymbols() {
      fetch('/symbols')
        .then(response => response.json())
        .then(data => {
          if (data.error) {
            console.error(data.error);
            rateInfo.textContent = 'Error al cargar monedas';
            return;
          }

          currencySymbols = data.symbols || {};
          populateCurrencySelects();
          
          // Valores por defecto
          if (currencySymbols.USD && currencySymbols.COP) {
            fromCurrencySelect.value = 'USD';
            toCurrencySelect.value = 'COP';
          }
        })
        .catch(error => {
          console.error('Error:', error);
          rateInfo.textContent = 'Error al cargar monedas';
        });
    }

    function populateCurrencySelects() {
      fromCurrencySelect.innerHTML = '';
      toCurrencySelect.innerHTML = '';

      const defaultOption = document.createElement('option');
      defaultOption.value = '';
      defaultOption.textContent = 'Seleccione moneda';
      defaultOption.disabled = true;
      defaultOption.selected = true;
      
      fromCurrencySelect.appendChild(defaultOption.cloneNode(true));
      toCurrencySelect.appendChild(defaultOption.cloneNode(true));

      const sortedSymbols = Object.entries(currencySymbols)
        .sort((a, b) => a[1].localeCompare(b[1]));

      sortedSymbols.forEach(([code, name]) => {
        const option1 = document.createElement('option');
        option1.value = code;
        option1.textContent = `${code} - ${name}`;
        fromCurrencySelect.appendChild(option1);

        const option2 = document.createElement('option');
        option2.value = code;
        option2.textContent = `${code} - ${name}`;
        toCurrencySelect.appendChild(option2);
      });
    }

    // Event listeners con debounce para mejor performance
    let timeout;
    fromAmount.addEventListener('input', () => {
      clearTimeout(timeout);
      timeout = setTimeout(updateConversion, 300);
    });
    
    fromCurrencySelect.addEventListener('change', updateConversion);
    toCurrencySelect.addEventListener('change', updateConversion);
    swapBtn.addEventListener('click', swapCurrencies);

    // Inicializar
    fetchSymbols();
  });
</script>